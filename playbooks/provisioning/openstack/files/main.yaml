heat_template_version: 2016-10-14

description: >
  Prepare the environment (servers, networks, security groups, etc.)
  for installing OpenShift.

parameters:

  # Networks to connect to or create
  external_network:
    type: string
    description: >
      The external network that provides floating IP addresses for the nodes
    constraints:
    - custom_constraint: neutron.network

  dns_nameserver:
    type: comma_delimited_list
    description: Addresses of a dns nameserver reachable in your environment
    default: 8.8.8.8

  ssh_key_name:
    type: string
    description: Name of the SSH keypair registered with Nova
    constraints:
    - custom_constraint: nova.keypair

  api_port:
    type: number
    description: The port number for the OpenShift API
    default: 8443

  master_image:
    description: >
      Select a base image to use for the master servers
    type: string
    constraints:
    - custom_constraint: glance.image

  master_count:
    description: >
      The number of master servers to create
    type: number

  master_flavor:
    description: >
      The Nova flavor for the master servers
    type: string
    constraints:
    - custom_constraint: nova.flavor

  infra_image:
    description: >
      Select a base image to use for the infra servers
    type: string
    constraints:
    - custom_constraint: glance.image

  infra_count:
    description: >
      The number of infra servers to create
    type: number

  infra_flavor:
    description: >
      The Nova flavor for the infra servers
    type: string
    constraints:
    - custom_constraint: nova.flavor

  app_image:
    description: >
      Select a base image to use for the app servers
    type: string
    constraints:
    - custom_constraint: glance.image

  app_count:
    description: >
      The number of app servers to create
    type: number

  app_flavor:
    description: >
      The Nova flavor for the app servers
    type: string
    constraints:
    - custom_constraint: nova.flavor

  root_volume_size:
    description: >
      Size of the root partition
    type: number

  docker_volume_size:
    description: >
      Size of a cinder volume in GB to allocate to docker for
      container/image storage
    type: number

  etcd_volume_size:
    description: >
      Size of a cinder volume in GB to allocate to etcd storage
    type: number


resources:

  # NOTE: this network and subnet is to provide SSH access via
  # floating IP addresses to install/update Openshift using
  # openshift-ansible. The idea is that it can be blocked after that's
  # done.
  provisioning_network:
    type: OS::Neutron::Net

  provisioning_subnet:
    type: OS::Neutron::Subnet
    properties:
      cidr: 192.168.1.0/24
      dns_nameservers: {get_param: dns_nameserver}
      network: {get_resource: provisioning_network}

  provisioning_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: {get_param: external_network}

  provisioning_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: {get_resource: provisioning_router}
      subnet: {get_resource: provisioning_subnet}

  provisioning_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
      - protocol: icmp

      - direction: ingress
        protocol: tcp
        port_range_min: 22
        port_range_max: 22

  control_network:
    type: OS::Neutron::Net

  control_subnet:
    type: OS::Neutron::Subnet
    properties:
      cidr: 172.18.10.0/24
      dns_nameservers: {get_param: dns_nameserver}
      network: {get_resource: control_network}

  control_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: {get_param: external_network}

  control_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: {get_resource: control_router}
      subnet: {get_resource: control_subnet}


  tenant_network:
    type: OS::Neutron::Net

  tenant_subnet:
    type: OS::Neutron::Subnet
    properties:
      cidr: 10.0.0.0/24
      network: {get_resource: tenant_network}
      gateway_ip: ""


  master_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
      - protocol: icmp
      # internal name services (pre 3.2)
      - direction: ingress
        protocol: tcp
        port_range_min: 53
        port_range_max: 53
      - direction: ingress
        protocol: udp
        port_range_min: 53
        port_range_max: 53
      # etcd: client -> server connections
      - direction: ingress
        protocol: tcp
        port_range_min: 2379
        port_range_max: 2379
      # etcd: server -> serer cluster communication
      - direction: ingress
        protocol: tcp
        port_range_min: 2380
        port_range_max: 2380
        remote_mode: remote_group_id
      # etcd: state changes
      - direction: ingress
        protocol: tcp
        port_range_min: 4001
        port_range_max: 4001
      # pod to pod communications
      - direction: ingress
        protocol: udp
        port_range_min: 4789
        port_range_max: 4789
      # internal name services (3.2+)
      - direction: ingress
        protocol: tcp
        port_range_min: 8053
        port_range_max: 8053
      - direction: ingress
        protocol: udp
        port_range_min: 8053
        port_range_max: 8053
      # master WebUI and API
      - direction: ingress
        protocol: tcp
        port_range_min: { get_param: api_port}
        port_range_max: { get_param: api_port}
      # kubernetes: kubelet communications
      - direction: ingress
        protocol: tcp
        port_range_min: 10250
        port_range_max: 10250
      # fluentd: docker logging
      - direction: ingress
        protocol: tcp
        port_range_min: 24224
        port_range_max: 24224
      - direction: ingress
        protocol: udp
        port_range_min: 24224
        port_range_max: 24224


  infra_node_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
      - protocol: icmp
      # cleartext application web traffic
      - direction: ingress
        protocol: tcp
        port_range_min: 80
        port_range_max: 80
      # encrypted application web traffic
      - direction: ingress
        protocol: tcp
        port_range_min: 443
        port_range_max: 443
      # pod to pod communications
      - direction: ingress
        protocol: udp
        port_range_min: 4789
        port_range_max: 4789
      # docker registry
      - direction: ingress
        protocol: tcp
        port_range_min: 5000
        port_range_max: 5000
      # kubelet communications
      - direction: ingress
        protocol: tcp
        port_range_min: 10250
        port_range_max: 10250
      # master WebUI and API
      - direction: ingress
        protocol: tcp
        port_range_min: { get_param: api_port}
        port_range_max: { get_param: api_port}


  app_node_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
      - protocol: icmp
      # pod to pod communications
      - direction: ingress
        protocol: udp
        port_range_min: 4789
        port_range_max: 4789
      # kubelet communications
      - direction: ingress
        protocol: tcp
        port_range_min: 10250
        port_range_max: 10250
      # master WebUI and API
      - direction: ingress
        protocol: tcp
        port_range_min: { get_param: api_port}
        port_range_max: { get_param: api_port}


  master_nodes:
    type: OS::Heat::ResourceGroup
    properties:
      count: {get_param: master_count}
      resource_def:
        type: master.yaml
        properties:
          key_name: {get_param: ssh_key_name}
          image: {get_param: master_image}
          flavor: {get_param: master_flavor}
          root_volume_size: {get_param: root_volume_size}
          docker_volume_size: {get_param: docker_volume_size}
          etcd_volume_size: {get_param: etcd_volume_size}
          ssh_user: centos
          external_network: {get_param: external_network}
          provisioning_network: {get_resource: provisioning_network}
          provisioning_subnet: {get_resource: provisioning_subnet}
          provisioning_security_group: {get_resource: provisioning_security_group}
          control_network: {get_resource: control_network}
          control_subnet: {get_resource: control_subnet}
          # master_server_group: TODO
          master_security_group: {get_resource: master_security_group}
          api_port: {get_param: api_port}
          external_lb_pool: {get_resource: external_lb_pool}
          internal_lb_pool: {get_resource: internal_lb_pool}

  infra_nodes:
    type: OS::Heat::ResourceGroup
    properties:
      count: {get_param: infra_count}
      resource_def:
        type: infra_node.yaml
        properties:
          key_name: {get_param: ssh_key_name}
          image: {get_param: infra_image}
          flavor: {get_param: infra_flavor}
          root_volume_size: {get_param: root_volume_size}
          docker_volume_size: {get_param: docker_volume_size}
          ssh_user: centos
          external_network: {get_param: external_network}
          provisioning_network: {get_resource: provisioning_network}
          provisioning_subnet: {get_resource: provisioning_subnet}
          provisioning_security_group: {get_resource: provisioning_security_group}
          control_network: {get_resource: control_network}
          control_subnet: {get_resource: control_subnet}
          tenant_network: {get_resource: tenant_network}
          tenant_subnet: {get_resource: tenant_subnet}
          security_group: {get_resource: infra_node_security_group}

  app_nodes:
    type: OS::Heat::ResourceGroup
    properties:
      count: {get_param: app_count}
      resource_def:
        type: app_node.yaml
        properties:
          key_name: {get_param: ssh_key_name}
          image: {get_param: app_image}
          flavor: {get_param: app_flavor}
          root_volume_size: {get_param: root_volume_size}
          docker_volume_size: {get_param: docker_volume_size}
          ssh_user: centos
          external_network: {get_param: external_network}
          provisioning_network: {get_resource: provisioning_network}
          provisioning_subnet: {get_resource: provisioning_subnet}
          provisioning_security_group: {get_resource: provisioning_security_group}
          control_network: {get_resource: control_network}
          control_subnet: {get_resource: control_subnet}
          tenant_network: {get_resource: tenant_network}
          tenant_subnet: {get_resource: tenant_subnet}
          security_group: {get_resource: app_node_security_group}


  external_load_balancer:
    type: OS::Neutron::LBaaS::LoadBalancer
    properties:
      vip_subnet: {get_resource: control_subnet}

  external_lb_listener:
    type: OS::Neutron::LBaaS::Listener
    properties:
      loadbalancer: { get_resource: external_load_balancer }
      protocol: HTTP
      protocol_port: { get_param: api_port }

  external_lb_pool:
    type: OS::Neutron::LBaaS::Pool
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      listener: { get_resource: external_lb_listener }

  external_lb_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_attr: [external_load_balancer, vip_port_id ]}



  internal_load_balancer:
    type: OS::Neutron::LBaaS::LoadBalancer
    properties:
      vip_subnet: {get_resource: control_subnet}

  internal_lb_listener:
    type: OS::Neutron::LBaaS::Listener
    properties:
      loadbalancer: { get_resource: internal_load_balancer }
      protocol: HTTP
      protocol_port: { get_param: api_port }

  internal_lb_pool:
    type: OS::Neutron::LBaaS::Pool
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      listener: { get_resource: internal_lb_listener }

outputs:
  master_node_api:
    value: { get_attr: [ external_lb_floating_ip, floating_ip_address ] }
  master_nodes:
    value: {get_attr: [master_nodes, attributes, access]}
  infra_nodes:
    value: {get_attr: [infra_nodes, attributes, access]}
  app_nodes:
    value: {get_attr: [app_nodes, attributes, access]}
