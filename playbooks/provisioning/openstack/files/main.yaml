heat_template_version: 2014-10-16

description: >
  Prepare the environment (servers, networks, security groups, etc.)
  for installing OpenShift.

parameters:

  # Networks to connect to or create
  external_network:
    type: string
    description: >
      The external network that provides floating IP addresses for the nodes
    constraints:
    - custom_constraint: neutron.network

  dns_nameserver:
    type: comma_delimited_list
    description: Addresses of a dns nameserver reachable in your environment
    default: 8.8.8.8

  ssh_key_name:
    type: string
    description: Name of the SSH keypair registered with Nova
    constraints:
    - custom_constraint: nova.keypair

  api_port:
    type: number
    description: The port number for the OpenShift API
    default: 443

resources:

  # Network Components
  control_network:
    type: OS::Neutron::Net

  control_subnet:
    type: OS::Neutron::Subnet
    properties:
      cidr: 192.168.0.0/24
      dns_nameservers: {get_param: dns_nameserver}
      network: {get_resource: control_network}



  external_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: {get_param: external_network}

  external_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: {get_resource: external_router}
      subnet: {get_resource: control_subnet}



  tenant_network:
    type: OS::Neutron::Net

  tenant_subnet:
    type: OS::Neutron::Subnet
    properties:
      cidr: 10.0.0.0/24
      network: {get_resource: tenant_network}
      gateway_ip: ""


  master_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
      - protocol: icmp

      - direction: ingress
        protocol: tcp
        port_range_min: { get_param: api_port}
        port_range_max: { get_param: api_port}

      - direction: ingress
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
      - direction: ingress
        protocol: tcp
        port_range_min: 4001
        port_range_max: 4001
      - direction: ingress
        protocol: tcp
        port_range_min: 8443
        port_range_max: 8443
      - direction: ingress
        protocol: tcp
        port_range_min: 53
        port_range_max: 53
      - direction: ingress
        protocol: udp
        port_range_min: 53
        port_range_max: 53
      - direction: ingress
        protocol: udp
        port_range_min: 4789
        port_range_max: 4789
      - direction: ingress
        protocol: tcp
        port_range_min: 8053
        port_range_max: 8053
      - direction: ingress
        protocol: udp
        port_range_min: 8053
        port_range_max: 8053
      - direction: ingress
        protocol: tcp
        port_range_min: 10250
        port_range_max: 10250
      - direction: ingress
        protocol: tcp
        port_range_min: 24224
        port_range_max: 24224
      - direction: ingress
        protocol: udp
        port_range_min: 24224
        port_range_max: 24224
      # etcd services
      - direction: ingress
        protocol: tcp
        port_range_min: 2379
        port_range_max: 2379
      - direction: ingress
        protocol: tcp
        port_range_min: 2380
        port_range_max: 2380
        remote_mode: remote_group_id



  master_nodes:
    type: OS::Heat::ResourceGroup
    properties:
      count: 1
      resource_def:
        type: master.yaml
        properties:
          key_name: {get_param: ssh_key_name}
          image: centos72  # TODO
          flavor: m1.small  # TODO
          root_volume_size: 10 # TODO
          docker_volume_size: 25 # TODO
          etcd_volume_size: 25 # TODO
          ssh_user: centos
          external_network: {get_param: external_network}
          control_network: {get_resource: control_network}
          control_subnet: {get_resource: control_subnet}
          tenant_network: {get_resource: tenant_network}
          tenant_subnet: {get_resource: tenant_subnet}
          # master_server_group: TODO
          master_security_group: {get_resource: master_security_group}
          api_port: {get_param: api_port}
          external_lb_pool: {get_resource: external_lb_pool}
          internal_lb_pool: {get_resource: internal_lb_pool}



  external_load_balancer:
    type: OS::Neutron::LBaaS::LoadBalancer
    properties:
      vip_subnet: {get_resource: control_subnet}

  external_lb_listener:
    type: OS::Neutron::LBaaS::Listener
    properties:
      loadbalancer: { get_resource: external_load_balancer }
      protocol: HTTP
      protocol_port: { get_param: api_port }

  external_lb_pool:
    type: OS::Neutron::LBaaS::Pool
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      listener: { get_resource: external_lb_listener }

  external_lb_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_attr: [external_load_balancer, vip_port_id ]}



  internal_load_balancer:
    type: OS::Neutron::LBaaS::LoadBalancer
    properties:
      vip_subnet: {get_resource: control_subnet}

  internal_lb_listener:
    type: OS::Neutron::LBaaS::Listener
    properties:
      loadbalancer: { get_resource: internal_load_balancer }
      protocol: HTTP
      protocol_port: { get_param: api_port }

  internal_lb_pool:
    type: OS::Neutron::LBaaS::Pool
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      listener: { get_resource: internal_lb_listener }

outputs:
  master_node_api:
    value: { get_attr: [ external_lb_floating_ip, floating_ip_address ] }
